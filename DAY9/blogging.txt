

Git 명령어 정리(기술 블로깅 및 토론)

Git
무료오픈소스 VCS(각종 문서 및 개발소스 버전 제어 및 변경관리 시스템)

개발자가 프로젝트의 변경 사항을 관리하고 추적하는 데 도움을 주는 버전 관리 시스템입니다. 
협업 및 작업 이력을 유지하는 데 중요한 도구입니다.

git 이전에는 서버저장소 하나만을 두고 개발관련 소스들을 관리했었다
git이 나오고나서 개발소스를 개인별로 관리할 수 있는 로컬저장소가 생기고
로컬저장소와 서버저장소(원격저장소)를 모두 제공하는 분산형 저장소 모델을 최초로 제공하게 되었다.






기본 명령어

git init > 작업폴더에 .git 로컬저장소 폴더가 만들어진다 (우리가 작업한 내용의 폴더가 git이 관리할 수 있도록 해줍니다)

git add . > 신규 추가/변경/삭제한 작업폴더의 내용을 스테이징(index 가상공간)으로 반영(임시 저장)

git commit -m "커밋 메시지" > 스테이징에 반영된 내용을 로컬저장소로 확정 반영(최종 저장)

git push > 로컬저장소의 내용을 원격저장소로 반영

git pull > 원격저장소의 최신 내용을 로컬저장소의 작업폴더로 가져옴

git branch -M main > 로컬 master 브랜치를 main 브랜치로 변경 (git commit을 하게되면 보통 master로컬저장소가 생기는데 깃허브의 원격저장소를 사용하려면 main으로 변경해줘야 합니다)

git remote add origin [깃허브 원격저장소 주소] > .git폴더에 깃허브주소를 등록하여 연동할 수 있도록 해줍니다

git push origin main > 깃허브 원격저장소에 origin/main 브랜치 생성 및 소스가 반영됨 (이때부터 깃허브에 작업한 내용이 보여짐)





협업할 때 주로 사용하는 명령어

git branch > 어떤 브랜치들이 있는지 확인

git branch [브랜치명] > 메인브랜치의 소스를 따서 새로 작업할 로컬브랜치를 생성

git checkout [브랜치명] > 로컬브랜치에서 작업하기 위해 브랜치를 이동시킨다 / 현재 브랜치 -> 이동할 브랜치

git push origin [브랜치명] > 깃허브 원격저장소에 origin/[브랜치명] 로컬원격브랜치 생성 및 소스가 반영됨

git pull origin main > 원격저장소 최신버전 가져오기

git merge [병합할 로컬 브랜치명] > 메인 / 로컬 브랜치 병합하기

git fetch > 원격저장소에서 새롭게 변경된 내용들을 로컬저장소로 가져오지만 이 과정에서 새로운 내용이 자동으로 병합되지 않고 확인 가능하다
즉, 현재 작업에 영향을 주지 않고 다른 사람이 변경한 내용을 확인할 수 있다
